/********************************************************************************
    2011-12-01
    ODLP PUMPTOWER
    Richen  E-mail: marchen@orientech.cc
    Init_logic for model,set property_for pumptower_asm_buf
    Orientech Shanghai, All Rights Reserved.
*******************************************************************************/

#include <PumpTower.inc>
const
   P_MAX_PRODUCE_NUMBER_CONST   1024
Var
	 PumpTower_Plan  :array[P_MAX_PRODUCE_NUMBER_CONST] of PumpTower_Struc
	 PumpTower_Plan_tail:integer
	 
	 
extern
	 P_get_file_path_by_key     :routine:string
	 short_name_of_key          :routine:string
	 P_Current_Plan_SN_IDX      :integer
	 
procedure PumpTower_Read_workplan()
Var
line,part_type:string
at_time:real
columns:integer
begin
    PumpTower_Plan_tail = 0
    open file '..\\ODLP\\SCHEDULES\\PumpTower\\PumpTower_workplan.csv' for text input as 1
    while(true)do
        read_line(#1, line)
        if(line == $EOF)then
            break
        endif
        if(line == 'END_OF_SCHEDULE')then
            break
        endif
        if(line == '')then
            continue
        endif
        if(line == '#')then
            continue
        endif
        columns = scan_str(line, "\t, ", part_type, at_time)
        PumpTower_Plan[PumpTower_Plan_tail].name = part_type
        PumpTower_Plan[PumpTower_Plan_tail].start_time = at_time
        PumpTower_Plan_tail = PumpTower_Plan_tail + 1
    endwhile
end

procedure P_set_props_for_pumptower_asm_buf(key_str:string;the_elem:element)
Var
file_path:string
my_line:String
tmp,proc_str:String
qty_val:integer
line_num,ii:integer
begin
    file_path = '..\\ODLP\\DATA\\ASM\\PumpTower\\asm_qty.txt'
    open file file_path for text input as 6
    read_line(#6, my_line)
    scan_str(my_line, "\t, ",line_num)
    for ii = 1 to line_num do
        read_line(#6, my_line)
        scan_str(my_line, "\t, ",proc_str,qty_val)
        if(proc_str==short_name_of_key(key_str))then
            break
        endif
        qty_val = -1
    endfor
    close #6
    if (qty_val < 0) then
        write(key_str,cr)
    endif
    the_elem->total_cnt = qty_val
end

procedure P_clear_file_log()
Var
the_elem:element
P_Cap:integer
begin
    open file 'D:\\deneb\\ODLP\\OUTPUT\\PumpTower\\P_Store_Cap.txt' for text output as 1
    close #1 
    open file 'D:\\deneb\\ODLP\\OUTPUT\\PumpTower\\P_PumpTower_Finished.txt' for text output as 1
    close #1 
    open file 'D:\\deneb\\ODLP\\OUTPUT\\PumpTower\\P_PumpTower_Proc.txt' for text output as 1
    close #1
    open file 'D:\\deneb\\ODLP\\OUTPUT\\PumpTower\\P_Tube_Asm.txt' for text output as 1
    close #1
    open file 'D:\\deneb\\ODLP\\OUTPUT\\PumpTower\\P_Acc_log.txt' for text output as 1
    close #1
    open file 'D:\\deneb\\ODLP\\OUTPUT\\PumpTower\\equip_util.txt' for text output as 1
    close #1
    open file 'D:\\deneb\\ODLP\\OUTPUT\\PumpTower\\P_Tube_Cutting.txt' for text output as 1
    close #1
    open file 'D:\\deneb\\ODLP\\OUTPUT\\PumpTower\\P_Store_Write.txt' for text output as 1
    close #1
    
    
    open file 'D:\\deneb\\ODLP\\OUTPUT\\PumpTower\\P_Store_Cap_Init.txt' for text output as 1
    the_elem = get_element('P_Tube_Store_1')
    if(the_elem->MAX_CAP>0)then
        P_Cap = the_elem->MAX_CAP
    else
        P_Cap = the_elem->total_capacity
    endif
    write(#1,'*Capacity\t',the_elem->name,'\t',P_Cap,cr)
    
    the_elem = get_element('P_Boring_Out_Buf_1')
    if(the_elem->MAX_CAP>0)then
        P_Cap = the_elem->MAX_CAP
    else
        P_Cap = the_elem->total_capacity
    endif
    write(#1,'*Capacity\t',the_elem->name,'\t',P_Cap,cr)
    
    the_elem = get_element('P_Cutting_Out_Buf_1')
    if(the_elem->MAX_CAP>0)then
        P_Cap = the_elem->MAX_CAP
    else
        P_Cap = the_elem->total_capacity
    endif
    write(#1,'*Capacity\t',the_elem->name,'\t',P_Cap,cr)

    the_elem = get_element('P_Tube_Warehouse_Buf_1')
    if(the_elem->MAX_CAP>0)then
        P_Cap = the_elem->MAX_CAP
    else
        P_Cap = the_elem->total_capacity
    endif
    write(#1,'*Capacity\t',the_elem->name,'\t',P_Cap,cr)
    close #1
end


procedure PumpTower_Init()
Var
the_elem_cls:element_class
the_elem:element
file_path :string
ii:integer
begin
    P_clear_file_log()
    PumpTower_Read_workplan()
    
    the_elem_cls = get_elem_class('P_PumpTower_Asm_In_Buf')
    P_Current_Plan_SN_IDX = -1
    for ii = 1 to the_elem_cls->num_element do
        the_elem = the_elem_cls->elements[ii]
        P_Current_Plan_SN_IDX = P_Current_Plan_SN_IDX + 1
        the_elem->PLAN_SN = PumpTower_Plan[P_Current_Plan_SN_IDX].name
        the_elem->KEY = 'PumpTower-S17-S16-S15-S14-S13-S12-S11-S10-S9-S8-S7-S6-S5-S4-S3-S2-S1'
        P_set_props_for_pumptower_asm_buf(the_elem->KEY,the_elem)
        delay 50*3600*24
    endfor
end
